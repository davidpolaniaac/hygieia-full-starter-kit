AWSTemplateFormatVersion: "2010-09-09"
Description: "Hygieia Full stater kit"

############################## Parameters ####################################################

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.xlarge
    AllowedValues:
      [
        t2.nano,
        t2.micro,
        t2.small,
        t2.medium,
        t2.large,
        t2.xlarge,
        t2.2xlarge,
        t3.nano,
        t3.micro,
        t3.small,
        t3.medium,
        t3.large,
        t3.xlarge,
        t3.2xlarge,
        m4.large,
        m4.xlarge,
        m4.2xlarge,
        m4.4xlarge,
        m4.10xlarge,
        m5.large,
        m5.xlarge,
        m5.2xlarge,
        m5.4xlarge,
        c5.large,
        c5.xlarge,
        c5.2xlarge,
        c5.4xlarge,
        c5.9xlarge,
        g3.8xlarge,
        r5.large,
        r5.xlarge,
        r5.2xlarge,
        r5.4xlarge,
        r3.12xlarge,
        i3.xlarge,
        i3.2xlarge,
        i3.4xlarge,
        i3.8xlarge,
        d2.xlarge,
        d2.2xlarge,
        d2.4xlarge,
        d2.8xlarge,
      ]
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  InstanceVolumeSize:
    Description: Instance volume size
    Type: Number
    Default: 100

  GitHubToken:
    Description: Github personal access token
    Type: String
    NoEcho: true

  AzureDevOpsToken:
    Description: Azure DevOps personal access token
    Type: String
    NoEcho: true

  AzureDevOpsProject:
    Description: Azure DevOps project
    Type: String

  AzureDevOpsOrganizationName:
    Description: Azure DevOps organization name
    Type: String

  JenkinsProtocol:
    Description: Jenkins Protocol
    Type: String
    Default: http
    AllowedValues:
      [
        http,
        https,
      ]

  JenkinsServer:
    Description: Jenkins Server domain without protocol
    Type: String
    Default: "jenkins:8080/"

  JenkinsUser:
    Description: Jenkins user
    Type: String

  JenkinsPassword:
    Description: Jenkins Password
    Type: String
    NoEcho: true

  SonarqubeServer:
    Description: Sonarqube Server
    Type: String
    Default: "http://sonarqube:9000"

  SonarqubeUser:
    Description: Sonarqube user
    Type: String

  SonarqubePassword:
    Description: Sonarqube Password
    Type: String
    NoEcho: true

######################################## Resources ######################################

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SG-hygieia-full-started-kit
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref "SSHLocation"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref "InstanceType"
      SecurityGroups: [!Ref "InstanceSecurityGroup"]
      KeyName: !Ref "KeyName"
      ImageId: !Ref "LatestAmiId"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref InstanceVolumeSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su -
          export GITHUB_TOKEN=${GitHubToken}
          export AZ_TOKEN=${AzureDevOpsToken}
          export AZ_PROJECT=${AzureDevOpsProject}
          export AZ_ORGANIZATION_NAME=${AzureDevOpsOrganizationName}
          export JENKINS_USER=${JenkinsUser}
          export JENKINS_PASSWORD=${JenkinsPassword}
          export SONAR_SERVER=${SonarqubeServer}
          export SONAR_USER=${SonarqubeUser}
          export SONAR_PASSWORD=${SonarqubePassword}

          if [ -z "$JENKINS_USER" && -z $JENKINS_PASSWORD ]
          then
              export JENKINS_SERVER=${JenkinsProtocol}://${JenkinsServer}
          else
              export JENKINS_SERVER=${JenkinsProtocol}://${JenkinsUser}:${JenkinsPassword}@${JenkinsServer}
          fi

          sysctl -w vm.max_map_count=262144
          sysctl -w fs.file-max=65536
          ulimit -n 65536
          ulimit -u 4096
          
          yum update -y aws-cfn-bootstrap
          yum install git -y
          yum install maven -y
          amazon-linux-extras install docker -y
          yum install docker -y
          service docker start
          chkconfig docker on
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          mkdir /hygieia
          git clone --recursive https://github.com/davidpolaniaac/hygieia-full-starter-kit.git /hygieia
          mvn -f /hygieia/ExecDashboard/pom.xml clean install package
          mvn -f /hygieia/hygieia-cmdb-company-collector/pom.xml clean install package  
          echo "GITHUB_TOKEN=$GITHUB_TOKEN
          JENKINS_SERVER=$JENKINS_SERVER
          SONAR_SERVER=$SONAR_SERVER
          SONAR_USER=$SONAR_USER
          SONAR_PASSWORD=$SONAR_PASSWORD
          AZ_TOKEN=$AZ_TOKEN
          AZ_PROJECT=$AZ_PROJECT
          AZ_ORGANIZATION_NAME=$AZ_ORGANIZATION_NAME" >> /hygieia/.env
          cd /hygieia && docker-compose up -d --build
          # Start cfn-signal to the wait condition
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}
  
  WaitCondition:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1
    Type: AWS::CloudFormation::WaitCondition
######################################## Outputs ######################################

Outputs:
  Instance:
    Value: !GetAtt [EC2Instance, PublicDnsName]
    Description: DNS Name of the newly created EC2 instance
